@namespace Bat.Blazor.Client.Shared

<!--
Razor component to render models in CoreUI style.

CoreUI model documentation: https://coreui.io/bootstrap/docs/components/modal/
-->

<div class="modal fade @cssClassShow" role="dialog"
    data-coreui-backdrop="static" 
    data-coreui-keyboard="false"
    tabindex="-1"
    aria-labelledby="staticBackdropLiveLabel" aria-hidden="@hidden" aria-modal="@modal" style="display:@display;">
  <div class="modal-dialog modal-dialog-scrollable @cssClassCentered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel"><BIcon icon="@icon" extraClassName="@iconClass"/> @title</h5>
        <button type="button" class="btn-close" data-coreui-dismiss="modal" aria-label="Close" @onclick="Close"></button>
      </div>
      <div class="modal-body">
        @ChildContent
      </div>
    </div>
  </div>
</div>
@if (showBackdrop)
{
    <div class="modal-backdrop fade show" @onclick="Close"></div>
}

@code {
    [Parameter]
    public string title { get; set; } = "Modal title";

    /// <summary>
    /// Set to true to center the modal vertically and horizontally. Default is true.
    /// </summary>
    [Parameter]
    public bool centered { get; set; } = true;

    /// <summary>
    /// Dialog type, one of "info", "warning", "danger", "success". Default is "info".
    /// The dialog will display an icon corresponding to the type. The icon is taken from Bootstrap Icons.
    /// </summary>
    [Parameter]
    public string type { get; set; } = "info";

    // property name must be ChildContent
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    private string cssClassShow = string.Empty;
    private string display = "none";
    private string? hidden = "true";
    private string? modal = null;
    private string cssClassCentered { get => centered ? "modal-dialog-centered" : string.Empty; }
    private bool showBackdrop = false;
    private string icon
    {
        get => type.ToLower() switch
        {
            "warning" => "bi-exclamation-triangle",
            "danger" => "x-circle-fill",
            "success" => "check-circle",
            _ => "bi-info-circle"
        };
    }
    private string iconClass
    {
        get => type.ToLower() switch
        {
            "warning" => "text-warning",
            "danger" => "text-danger",
            "success" => "text-success",
            _ => "text-info"
        };
    }

    public void Open()
    {
        cssClassShow = "show";
        display = "block";
        hidden = null;
        modal = "true";
        showBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        cssClassShow = string.Empty;
        display = "none";
        hidden = "true";
        modal = null;
        showBackdrop = false;
        StateHasChanged();
    }
}
