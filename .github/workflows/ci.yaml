name: 'ci'

on:
  push:
    branches: [ '*' ]
  pull_request:
    types: [ opened, edited, reopened, synchronize, review_requested ]
    branches: [ '*' ]
  workflow_call:

env:
  TEMPLATE_ROOT: ./content/Bat
  TAG_PREFIX: v
  NUGET_PROJECT_FILE: Ddth.Templates.Blazor.csproj
  DOCKER_IMAGE: btnguyen2k/bat

jobs:
  BuildAndTestTemplate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet: [ '8.x', '9.x' ]
    name: Build and test the original template with dotnet ${{ matrix.dotnet }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup dotnet ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - name: Choose .NET version
        run: |
          VERSION=$(echo ${{ matrix.dotnet }} | sed -E "s/^([0-9]+).*/\1/")
          echo {\"sdk\": {\"version\": \"${VERSION}\"}} > global.json
          cat global.json
      - name: Display dotnet version
        run: dotnet --version
      - name: Install dependencies
        run: cd ${{ env.TEMPLATE_ROOT }} && dotnet restore
      - name: Build
        run: cd ${{ env.TEMPLATE_ROOT }} && dotnet build --no-restore
      - name: Test
        run: cd ${{ env.TEMPLATE_ROOT }} && dotnet test --no-restore
      # - name: Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     fail_ci_if_error: true
      #     token: ${{ secrets.CODECOV_TOKEN }}

  ReleaseDryRun:
    if: github.event_name == 'push'
    needs: BuildAndTestTemplate
    runs-on: ubuntu-latest
    outputs:
      RESULT: ${{ steps.release_dry_run.outputs.result }}
      VERSION: ${{ steps.release_dry_run.outputs.releaseVersion }}
      RELEASE_NOTES: ${{ steps.release_dry_run.outputs.releaseNotes }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Release (dry-run)
        id: release_dry_run
        uses: btnguyen2k/action-semrelease@v4
        with:
          dry-run: true
          auto-mode: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag-major-release: false
          tag-minor-release: false
          branches: ${{ github.ref_name }}
          tag-prefix: ${{ env.TAG_PREFIX }}
          tag-only: true

  TestNugetPackage:
    needs: BuildAndTestTemplate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet: [ '8.x', '9.x' ]
    name: Build NuGet package with dotnet ${{ matrix.dotnet }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup dotnet ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - name: Choose .NET version
        run: |
          VERSION=$(echo ${{ matrix.dotnet }} | sed -E "s/^([0-9]+).*/\1/")
          echo {\"sdk\": {\"version\": \"${VERSION}\"}} > global.json
          cat global.json
      - name: Display dotnet version
        run: dotnet --version
      - name: Update NuGet metadata
        uses: actions/github-script@v7
        env:
          RESULT: ${{ needs.ReleaseDryRun.outputs.RESULT }}
          VERSION: ${{ needs.ReleaseDryRun.outputs.VERSION }}
          RELEASE_NOTES: ${{ needs.ReleaseDryRun.outputs.RELEASE_NOTES }}
        with:
          script: |
            console.log(`üêõ [DEBUG] RESULT: ${process.env['RESULT']}`);
            var version = '0.0.0';
            var releaseNotes = process.env['RESULT'];

            if (process.env['RESULT'] == 'SUCCESS') {
              version = process.env['VERSION'];
              releaseNotes = process.env['RELEASE_NOTES'];
            }
            console.log(`üêõ [DEBUG] RELEASE VERSION: ${version}`);
            console.log(`üêõ [DEBUG] RELEASE NOTES: ${releaseNotes}`);

            releaseNotes = releaseNotes.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            var fs = require('fs');
            var content = fs.readFileSync('${{ env.NUGET_PROJECT_FILE }}', 'utf8');
            content = content.replace(/<<VERSION>>/g, version);
            content = content.replace(/<<RELEASE-NOTES>>/g, releaseNotes);
            content = content.replace(/<<RELEASE_NOTES>>/g, releaseNotes);
            fs.writeFileSync('${{ env.NUGET_PROJECT_FILE }}', content);
      - name: Build NuGet package
        run: |
          cat ${{ env.NUGET_PROJECT_FILE }}
          dotnet pack

  TestDockerfileLinuxTemplate:
    needs: BuildAndTestTemplate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platforms: [ 'linux/amd64', 'linux/arm64' ]
        dockerfiles: [ 'Dockerfile', 'Dockerfile.dev' ]
    name: Test building Docker image(s) for Linux from the original template
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image for ${{ matrix.platforms }} with ${{ matrix.dockerfiles }}
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platforms }}
          push: false
          load: true
          tags: test
          file: ${{ env.TEMPLATE_ROOT }}/${{ matrix.dockerfiles }}
          context: ${{ env.TEMPLATE_ROOT }}
      - name: Test Docker container for ${{ matrix.platforms }} with ${{ matrix.dockerfiles }}
        run: |
          CONTAINER=$(docker run -d \
            --name test \
            -p 1234:8080 \
            --platform ${{ matrix.platforms }} \
            test)
          sleep 30 # Wait for the container to start and bootstrap, increase wait time if needed
          docker logs ${CONTAINER}
          STATUS_OUTPUT=$(curl http://localhost:1234/healthz)
          echo "‚ÑπÔ∏è Health check output: $STATUS_OUTPUT"
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:1234/healthz)
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "‚ùå Health check failed with status code $STATUS_CODE"
            exit 1
          fi

  TestDockerfileWindowsTemplate:
    needs: BuildAndTestTemplate
    runs-on: windows-2022
    strategy:
      matrix:
        platforms: [ 'windows/amd64' ]
    name: Test building Docker image(s) for Windows from the original template
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Docker image for ${{ matrix.platforms }}
        # Use mr-smithers-excellent/docker-build-push as docker/build-push-action requires docker/setup-buildx-action which does not support Windows yet
        # Monitor this issue https://github.com/docker/build-push-action/issues/18
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          platform: ${{ matrix.platforms }}
          registry: docker.io
          image: test
          tags: test
          pushImage: false
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
          dockerfile: ${{ env.TEMPLATE_ROOT }}/Dockerfile.win
          directory: ${{ env.TEMPLATE_ROOT }}/

  PublishDockerImagesLinuxBuild:
    if: |
      needs.ReleaseDryRun.outputs.RESULT == 'SUCCESS' &&
      github.ref == 'refs/heads/dev'
    needs: [ReleaseDryRun, TestDockerfileLinuxTemplate]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platforms: [ 'linux/amd64', 'linux/arm64' ]
    name: Build Docker image(s) - Linux - Dev Branch
    env:
      VERSION: ${{ needs.ReleaseDryRun.outputs.VERSION }}
    outputs:
      VERSION: ${{ needs.ReleaseDryRun.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Update version metadata
        run: |
          DATE=`date +%Y%m%d%H%M%S`
          sed -i -E "s/^(\s*\"Version\"\s*:\s*)\"[^\"]+\"/\1\"${{ env.VERSION }}-${DATE}\"/" content/Bat/Bat.Api/appsettings.json
          sed -i -E "s/^(\s*\"Version\"\s*:\s*)\"[^\"]+\"/\1\"${{ env.VERSION }}-${DATE}\"/" content/Bat/Bat.Blazor/Bat.Blazor/appsettings.json
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
      - name: Prepare
        run: |
          platform=${{ matrix.platforms }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platforms }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.DOCKER_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          file: ${{ env.TEMPLATE_ROOT }}/Dockerfile.dev
          context: ${{ env.TEMPLATE_ROOT }}
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  PublishDockerImagesLinuxMerge:
    runs-on: ubuntu-latest
    needs: PublishDockerImagesLinuxBuild
    name: Merge & Publish Docker image(s) - Linux
    env:
      VERSION: ${{ needs.PublishDockerImagesLinuxBuild.outputs.VERSION }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create \
            -t ${{ env.DOCKER_IMAGE }}:dev \
            -t ${{ env.DOCKER_IMAGE }}:${{ env.VERSION }}-dev \
            -t ${{ env.DOCKER_IMAGE }}:latest \
            -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            $(printf '${{ env.DOCKER_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy to demo environment
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ secrets.AZURE_CONTAINER_APP }}
          resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
          imageToDeploy: docker.io/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  PublishDockerImagesWindows:
    if: |
      needs.ReleaseDryRun.outputs.RESULT == 'SUCCESS' &&
      github.ref == 'refs/heads/dev'
    needs: [ReleaseDryRun, TestDockerfileWindowsTemplate]
    runs-on: windows-2022
    strategy:
      matrix:
        platforms: [ 'windows/amd64' ]
    name: Publishing Docker image(s) - Windows - Dev Branch
    env:
      VERSION: ${{ needs.ReleaseDryRun.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Docker image for ${{ matrix.platforms }}
        # Use mr-smithers-excellent/docker-build-push as docker/build-push-action requires docker/setup-buildx-action which does not support Windows yet
        # Monitor this issue https://github.com/docker/build-push-action/issues/18
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          platform: ${{ matrix.platforms }}
          registry: docker.io
          image: ${{ env.DOCKER_IMAGE }}-windows
          tags: dev, ${{ env.VERSION }}-dev, latest
          pushImage: true
          dockerfile: ${{ env.TEMPLATE_ROOT }}/Dockerfile.win
          directory: ${{ env.TEMPLATE_ROOT }}/
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}

  TestGenerateSolutionLinux:
    runs-on: ubuntu-latest
    needs: [BuildAndTestTemplate, TestDockerfileLinuxTemplate]
    strategy:
      matrix:
        dotnet: [ '8.x', '9.x' ]
    name: (Linux) Build and test the generated solution with dotnet ${{ matrix.dotnet }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup dotnet ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - name: Choose .NET version
        run: |
          VERSION=$(echo ${{ matrix.dotnet }} | sed -E "s/^([0-9]+).*/\1/")
          echo {\"sdk\": {\"version\": \"${VERSION}\"}} > global.json
          cat global.json
      - name: Display dotnet version
        run: dotnet --version
      - name: Install template
        run: cd ${{ env.TEMPLATE_ROOT }} && dotnet new install ./
      - name: Generate solution
        run: |
          mkdir temp && \
          cd temp && \
          dotnet new bat -n MyAppLinux
      - name: Install dependencies
        run: cd temp/ && dotnet restore
      - name: Build
        run: cd temp/ && dotnet build --no-restore
      - name: Test
        run: cd temp/ && dotnet test --no-restore
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          push: false
          tags: test
          file: temp/Dockerfile
          context: temp/

  TestGenerateSolutionWindows:
    runs-on: windows-2022
    needs: [BuildAndTestTemplate, TestDockerfileWindowsTemplate]
    strategy:
      matrix:
        dotnet: [ '8.x', '9.x' ]
    name: (Windows) Build and test the generated solution with dotnet ${{ matrix.dotnet }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup dotnet ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - name: Display dotnet version
        run: dotnet --version
      - name: Install template
        run: cd ${{ env.TEMPLATE_ROOT }} && dotnet new install ./
      - name: Generate solution
        run: |
          mkdir temp
          cd temp
          dotnet new bat -n MyAppWindows
      - name: Install dependencies
        run: |
          cd temp
          dotnet restore
      - name: Build
        run: |
          cd temp
          dotnet build --no-restore
      - name: Test
        run: |
          cd temp
          dotnet test --no-restore
      - name: Build Docker image
        # Use mr-smithers-excellent/docker-build-push as docker/build-push-action requires docker/setup-buildx-action which does not support Windows yet
        # Monitor this issue https://github.com/docker/build-push-action/issues/18
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          registry: docker.io
          image: test
          tags: test
          pushImage: false
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PAT }}
          dockerfile: temp/Dockerfile.win
          directory: temp/
